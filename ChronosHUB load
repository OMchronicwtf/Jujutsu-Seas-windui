loadstring(game:HttpGet("https://github.com/OMchronicwtf/Jujutsu-Seas-windui/raw/refs/heads/main/ChronosHUB%20load"))()

-- Variables go here!
local Quests = loadstring(game:HttpGet("https://github.com/OMchronicwtf/Jujutsu-Seas-windui/raw/refs/heads/main/0%20Quest%20Table"))()

local player = game:GetService("Players").LocalPlayer
local QuestEvent = game:GetService("ReplicatedStorage").Resource.Remotes.Bindable.Compliments
local RunService = game:GetService("RunService")

-- Helper functions
local autoQuestEnabled = false
local autoQuestLoop
local currentHighestQuest = nil  -- Track current highest quest
local isScriptInitialized = true  -- Flag to skip initial disabled notifications

local function GetHighestQuest()
    local level = player:WaitForChild("Data"):WaitForChild("Level").Value
    local selected
    for _, q in ipairs(Quests) do
        if level >= q.MinLevel then
            selected = q
        end
    end
    return selected
end

local function IsInQuest()
    local questFrame = player.PlayerGui:FindFirstChild("Quest") and player.PlayerGui.Quest:FindFirstChild("Mission")
    return questFrame and questFrame.Visible or false
end

-- Specific quest vars
local selectedQuest = Quests[1].DisplayName
local autoStartSpecificEnabled = false
local specificQuestConnection

-- ================================================

local QuestTab = Window:Tab({
    Title = "Quests",
    Icon = "book-open-text", -- optional
    Locked = false,
})

local Toggle = QuestTab:Toggle({
    Title = "Auto-Quest",
    Desc = "The highest available quest will be started automatically.",
    Icon = "badge-check",
    Type = "Checkbox",
    Default = false,
    Callback = function(state) 
        autoQuestEnabled = state

        if state then
            WindUI:Notify({
                Title = "Auto-Quest",
                Content = "Enabled!",
                Duration = 3,
                Icon = "badge-plus",
            })
            QuestEvent:FireServer({Type = "RemoveQuest"})
            task.wait(0.1)

            currentHighestQuest = nil  -- Reset tracking for new session

            autoQuestLoop = task.spawn(function()
                while autoQuestEnabled do
                    if IsInQuest() then
                        task.wait(0.1)
                        continue
                    end

                    task.wait(0.2)

                    local quest = GetHighestQuest()
                    if quest then
                        local isNewQuest = (currentHighestQuest == nil) or (quest.QuestName ~= currentHighestQuest.QuestName)
                        if isNewQuest then
                            if currentHighestQuest == nil then
                                WindUI:Notify({
                                    Title = "Quest Started",
                                    Content = "" .. quest.DisplayName,
                                    Duration = 3,
                                    Icon = "swords",
                                })
                            else
                                WindUI:Notify({
                                    Title = "New Quest Unlocked",
                                    Content = "" .. quest.DisplayName,
                                    Duration = 3,
                                    Icon = "swords",
                                })
                            end
                            currentHighestQuest = quest
                        end
                        QuestEvent:FireServer({Quest = quest.QuestName, Type = "RepeatQuest"})
                    end

                    task.wait(0.1)
                end
            end)
        else
            if autoQuestLoop then
                task.cancel(autoQuestLoop)
                autoQuestLoop = nil
            end
            QuestEvent:FireServer({Type = "RemoveQuest"})
            if not isScriptInitialized then
                WindUI:Notify({
                    Title = "Auto-Quest",
                    Content = "Disabled",
                    Duration = 3,
                    Icon = "badge-minus",
                })
            end
        end
    end
})

QuestTab:Divider()

local SpecificToggle = QuestTab:Toggle({
    Title = "Auto-Quest (Specific)",
    Desc = "The quest you select will be started automatically.",
    Icon = "badge-check",
    Type = "Checkbox",
    Default = false,
    Callback = function(state) 
        autoStartSpecificEnabled = state

        if state then
            WindUI:Notify({
                Title = "Auto-Quest (Specific)",
                Content = "" .. selectedQuest,
                Duration = 3,
                Icon = "badge-plus",
            })
            QuestEvent:FireServer({Type = "RemoveQuest"})

            specificQuestConnection = RunService.Heartbeat:Connect(function()
                if not autoStartSpecificEnabled then return end

                local questFrame = player.PlayerGui:FindFirstChild("Quest") 
                    and player.PlayerGui.Quest:FindFirstChild("Mission")
                local inQuest = questFrame and questFrame.Visible or false

                if not inQuest then
                    local questObj
                    for _, q in ipairs(Quests) do
                        if q.DisplayName == selectedQuest then
                            questObj = q
                            break
                        end
                    end
                    if questObj then
                        QuestEvent:FireServer({Quest = questObj.QuestName, Type = "RepeatQuest"})
                    end
                end
            end)
        else
            if specificQuestConnection then
                specificQuestConnection:Disconnect()
                specificQuestConnection = nil
            end
            QuestEvent:FireServer({Type = "RemoveQuest"})
            if not isScriptInitialized then
                WindUI:Notify({
                    Title = "Auto-Quest (Specific)",
                    Content = "Disabled!",
                    Duration = 3,
                    Icon = "badge-minus",
                })
            end
        end
    end
})

local questOptions = {}
for _, q in ipairs(Quests) do
    table.insert(questOptions, q.DisplayName)
end

local Dropdown = QuestTab:Dropdown({
    Title = "Select Quest",
    Values = questOptions,
    Value = questOptions[1],
    Multi = false,
    AllowNone = false,
    Callback = function(option) 
        selectedQuest = option
    end
})

QuestTab:Divider()

local Button = QuestTab:Button({
    Title = "Go to Quest",
    Justify = "Center",
    IconAlign = "Right",
    Icon = "map-pin",
    Callback = function()
        if not IsInQuest() then
            WindUI:Notify({
                Title = "Cannot Teleport",
                Content = "No active quests!",
                Duration = 3,
                Icon = "badge-x",
            })
            return
        end

        local missionFrame = player.PlayerGui:FindFirstChild("Quest") and player.PlayerGui.Quest:FindFirstChild("Mission")
        local titleFrame = missionFrame:FindFirstChild("Frame") and missionFrame.Frame:FindFirstChild("Title")
        if not titleFrame or not titleFrame:IsA("TextLabel") then
            return
        end

        local currentQuestName = titleFrame.Text

        local questObj
        for _, q in ipairs(Quests) do
            if q.QuestName == currentQuestName then
                questObj = q
                break
            end
        end

        if questObj and questObj.Pos then
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                player.Character.HumanoidRootPart.CFrame = CFrame.new(questObj.Pos)
                WindUI:Notify({
                    Title = "Teleport",
                    Content = "Teleported to: " .. currentQuestName,
                    Duration = 3,
                    Icon = "map-pin",
                })
            end
        end
    end
})

local FarmTab = Window:Tab({
    Title = "Farming",
    Icon = "swords", -- optional
    Locked = false,
})

-- Farm-specific variables
local autoFarmEnabled = false
local autoFarmTask
local autoFarmHeartbeat
local autoFarmZoneLock
local currentFarmQuest = nil  -- Track current farm quest
local behindDistance = 8
local aboveHeight = 1

local multiFarmEnabled = false
local multiFarmTask
local multiFarmHeartbeat
local multiFarmZoneLock
local selectedQuests = {}

local selectedWeapon = "None"
local superKillEnabled = false
local weaponCheckLoop

local M1Remote = game:GetService("ReplicatedStorage").Resource.Remotes.M1

local weaponOptions = {"None", "Weapon", "Style", "Moveset"}

local WeaponDropdown = FarmTab:Dropdown({
    Title = "Equip Weapon",
    Values = weaponOptions,
    Value = "None",
    Multi = false,
    AllowNone = false,
    Callback = function(option) 
        selectedWeapon = option
    end
})

local SuperKillToggle = FarmTab:Toggle({
    Title = "Instakill (After 12% Damage)",
    Desc = "Enemies will be instakilled after taking 12% damage.",
    Icon = "badge-check",
    Type = "Checkbox",
    Default = false,
    Callback = function(state) 
        superKillEnabled = state
    end
})

FarmTab:Divider()

local function AttachSuperKill(enemy)
    if enemy and enemy:FindFirstChild("Humanoid") and superKillEnabled and (autoFarmEnabled or multiFarmEnabled) then
        local humanoid = enemy.Humanoid
        local initialHealth = humanoid.Health
        local connection
        connection = humanoid.HealthChanged:Connect(function(health)
            if health <= initialHealth * 0.88 then
                humanoid.Health = 0
                connection:Disconnect()
            end
        end)
    end
end

local function EquipWeapon()
    if not (autoFarmEnabled or multiFarmEnabled) then return end

    local char = player.Character
    if not char or not char:FindFirstChild("Humanoid") then return end

    if selectedWeapon == "None" then
        char.Humanoid:UnequipTools()
    else
        local currentTool = char:FindFirstChildOfClass("Tool")
        if not currentTool or currentTool.Name ~= selectedWeapon then
            local tool = player.Backpack:FindFirstChild(selectedWeapon)
            if tool then
                char.Humanoid:EquipTool(tool)
            end
        end
    end
end

local function StartWeaponCheckLoop()
    if (autoFarmEnabled or multiFarmEnabled) and not weaponCheckLoop then
        weaponCheckLoop = task.spawn(function()
            while autoFarmEnabled or multiFarmEnabled do
                EquipWeapon()
                task.wait(1)
            end
            weaponCheckLoop = nil
        end)
    end
end

local function GetSafeBehindPosition(enemyHRP)
    local rootPos = enemyHRP.Position
    local lookVec = enemyHRP.CFrame.LookVector
    return rootPos - lookVec * behindDistance + Vector3.new(0, aboveHeight, 0)
end

local function LockAtPosition(pos, farmType)
    local hrp = player.Character:WaitForChild("HumanoidRootPart")
    if farmType == "auto" then
        if autoFarmZoneLock then autoFarmZoneLock:Disconnect() end
        autoFarmZoneLock = RunService.Heartbeat:Connect(function()
            hrp.CFrame = pos
        end)
    elseif farmType == "multi" then
        if multiFarmZoneLock then multiFarmZoneLock:Disconnect() end
        multiFarmZoneLock = RunService.Heartbeat:Connect(function()
            hrp.CFrame = pos
        end)
    end
end

local function FarmQuest(questData, farmType)
    if not questData then return end

    if not questData.EnemyName or not questData.Pos then
        WindUI:Notify({
            Title = "Farm Error",
            Content = "Quest data incomplete!",
            Duration = 3,
            Icon = "badge-x",
        })
        return
    end

    local zoneCFrame = CFrame.new(questData.Pos)
    local hrp = player.Character:WaitForChild("HumanoidRootPart")
    hrp.CFrame = zoneCFrame
    LockAtPosition(zoneCFrame, farmType)
    task.wait(0.3)

    if not IsInQuest() then
        QuestEvent:FireServer({ Quest = questData.QuestName, Type = "RepeatQuest" })
    end

    repeat task.wait(0.1) until IsInQuest()

    local targetEnemyName = questData.EnemyName

    repeat
        local enemy = nil
        for _, mob in pairs(workspace.Mobs:GetChildren()) do
            if mob.Name == targetEnemyName and mob:FindFirstChild("HumanoidRootPart") and mob:FindFirstChild("Humanoid") then
                enemy = mob
                break
            end
        end

        if enemy and enemy.Parent and enemy:FindFirstChild("HumanoidRootPart") then
            local enemyHRP = enemy.HumanoidRootPart

            AttachSuperKill(enemy)

            if farmType == "auto" then
                if autoFarmZoneLock then autoFarmZoneLock:Disconnect(); autoFarmZoneLock = nil end
                if autoFarmHeartbeat then autoFarmHeartbeat:Disconnect() end
                autoFarmHeartbeat = RunService.Heartbeat:Connect(function()
                    if not autoFarmEnabled then
                        if autoFarmHeartbeat then autoFarmHeartbeat:Disconnect(); autoFarmHeartbeat = nil end
                        return
                    end
                    if enemy and enemy.Parent and enemy:FindFirstChild("HumanoidRootPart") then
                        local targetPos = GetSafeBehindPosition(enemyHRP)
                        hrp.CFrame = hrp.CFrame:Lerp(CFrame.new(targetPos, enemyHRP.Position + Vector3.new(0, aboveHeight, 0)), 0.35)
                    else
                        if autoFarmHeartbeat then autoFarmHeartbeat:Disconnect(); autoFarmHeartbeat = nil end
                        LockAtPosition(zoneCFrame, "auto")
                    end
                end)
            elseif farmType == "multi" then
                if multiFarmZoneLock then multiFarmZoneLock:Disconnect(); multiFarmZoneLock = nil end
                if multiFarmHeartbeat then multiFarmHeartbeat:Disconnect() end
                multiFarmHeartbeat = RunService.Heartbeat:Connect(function()
                    if not multiFarmEnabled then
                        if multiFarmHeartbeat then multiFarmHeartbeat:Disconnect(); multiFarmHeartbeat = nil end
                        return
                    end
                    if enemy and enemy.Parent and enemy:FindFirstChild("HumanoidRootPart") then
                        local targetPos = GetSafeBehindPosition(enemyHRP)
                        hrp.CFrame = hrp.CFrame:Lerp(CFrame.new(targetPos, enemyHRP.Position + Vector3.new(0, aboveHeight, 0)), 0.35)
                    else
                        if multiFarmHeartbeat then multiFarmHeartbeat:Disconnect(); multiFarmHeartbeat = nil end
                        LockAtPosition(zoneCFrame, "multi")
                    end
                end)
            end

            M1Remote:FireServer({
                type = "M1", InAir = false, UpTilt = false
            })
        else
            LockAtPosition(zoneCFrame, farmType)
        end

        task.wait(0.1)
    until not IsInQuest()

    if farmType == "auto" then
        if autoFarmHeartbeat then autoFarmHeartbeat:Disconnect(); autoFarmHeartbeat = nil end
        if autoFarmZoneLock then autoFarmZoneLock:Disconnect(); autoFarmZoneLock = nil end
    elseif farmType == "multi" then
        if multiFarmHeartbeat then multiFarmHeartbeat:Disconnect(); multiFarmHeartbeat = nil end
        if multiFarmZoneLock then multiFarmZoneLock:Disconnect(); multiFarmZoneLock = nil end
    end
end

local function ResumeFarming()
    EquipWeapon()

    StartWeaponCheckLoop()

    if autoFarmEnabled then
        QuestEvent:FireServer({ Type = "RemoveQuest" })
        task.wait(0.2)
        autoFarmTask = task.spawn(function()
            while autoFarmEnabled do
                local level = player:WaitForChild("Data").Level.Value
                local bestQuest
                for _, q in ipairs(Quests) do
                    if level >= q.MinLevel then
                        bestQuest = q
                    end
                end
                if bestQuest then
                    local isNewQuest = (currentFarmQuest == nil) or (bestQuest.QuestName ~= currentFarmQuest.QuestName)
                    if isNewQuest then
                        if currentFarmQuest == nil then
                            WindUI:Notify({
                                Title = "Quest Started",
                                Content = "" .. bestQuest.DisplayName,
                                Duration = 3,
                                Icon = "swords",
                            })
                        else
                            WindUI:Notify({
                                Title = "New Quest Unlocked",
                                Content = "" .. bestQuest.DisplayName,
                                Duration = 3,
                                Icon = "swords",
                            })
                        end
                        currentFarmQuest = bestQuest
                    end
                    FarmQuest(bestQuest, "auto")
                else
                    task.wait(1)
                end
            end
        end)
    end

    if multiFarmEnabled then
        QuestEvent:FireServer({ Type = "RemoveQuest" })
        task.wait(0.1)
        multiFarmTask = task.spawn(function()
            while multiFarmEnabled do
                if #selectedQuests == 0 then
                    task.wait(0.5)
                else
                    for _, questName in ipairs(selectedQuests) do
                        if not multiFarmEnabled then break end
                        local questData
                        for _, q in ipairs(Quests) do
                            if q.DisplayName == questName then
                                questData = q
                                break
                            end
                        end
                        if questData then
                            FarmQuest(questData, "multi")
                        end
                    end
                end
            end
        end)
    end
end

player.CharacterAdded:Connect(function()
    task.wait(1)
    ResumeFarming()
end)

local Toggle = FarmTab:Toggle({
    Title = "Auto-Farm",
    Desc = "The highest available quest will be farmed automatically.",
    Icon = "badge-check",
    Type = "Checkbox",
    Default = false,
    Callback = function(state) 
        autoFarmEnabled = state

        if state then
            WindUI:Notify({
                Title = "Auto-Farm",
                Content = "Enabled!",
                Duration = 3,
                Icon = "badge-plus",
            })
            QuestEvent:FireServer({ Type = "RemoveQuest" })
            task.wait(0.1)

            currentFarmQuest = nil  -- Reset tracking for new session

            EquipWeapon()
            StartWeaponCheckLoop()

            autoFarmTask = task.spawn(function()
                while autoFarmEnabled do
                    local level = player:WaitForChild("Data").Level.Value
                    local bestQuest
                    for _, q in ipairs(Quests) do
                        if level >= q.MinLevel then
                            bestQuest = q
                        end
                    end
                    if bestQuest then
                        local isNewQuest = (currentFarmQuest == nil) or (bestQuest.QuestName ~= currentFarmQuest.QuestName)
                        if isNewQuest then
                            if currentFarmQuest == nil then
                                WindUI:Notify({
                                    Title = "Quest Started",
                                    Content = "" .. bestQuest.DisplayName,
                                    Duration = 3,
                                    Icon = "swords",
                                })
                            else
                                WindUI:Notify({
                                    Title = "New Quest Unlocked",
                                    Content = "" .. bestQuest.DisplayName,
                                    Duration = 3,
                                    Icon = "swords",
                                })
                            end
                            currentFarmQuest = bestQuest
                        end
                        FarmQuest(bestQuest, "auto")
                    else
                        task.wait(1)
                    end
                end
            end)
        else
            if autoFarmTask then
                task.cancel(autoFarmTask)
                autoFarmTask = nil
            end
            QuestEvent:FireServer({ Type = "RemoveQuest" })
            if autoFarmHeartbeat then autoFarmHeartbeat:Disconnect(); autoFarmHeartbeat = nil end
            if autoFarmZoneLock then autoFarmZoneLock:Disconnect(); autoFarmZoneLock = nil end
            if not isScriptInitialized then
                WindUI:Notify({
                    Title = "Auto-Farm",
                    Content = "Disabled!",
                    Duration = 3,
                    Icon = "badge-minus",
                })
            end
        end
    end
})

FarmTab:Divider()

local MultiToggle = FarmTab:Toggle({
    Title = "Auto-Farm (Specific & Multi)",
    Desc = "The quests you select will be farmed automatically.",
    Icon = "badge-check",
    Type = "Checkbox",
    Default = false,
    Callback = function(state) 
        multiFarmEnabled = state

        if state then
            local content = (#selectedQuests == 1 and selectedQuests[1]) or (#selectedQuests > 1 and "Multiple Quests") or "No Quests Selected"
            WindUI:Notify({
                Title = "Auto-Farm (Specific & Multi)",
                Content = content,
                Duration = 3,
                Icon = "badge-plus",
            })
            QuestEvent:FireServer({ Type = "RemoveQuest" })
            task.wait(0.1)

            EquipWeapon()
            StartWeaponCheckLoop()

            multiFarmTask = task.spawn(function()
                while multiFarmEnabled do
                    if #selectedQuests == 0 then
                        task.wait(0.5)
                    else
                        for _, questName in ipairs(selectedQuests) do
                            if not multiFarmEnabled then break end
                            local questData
                            for _, q in ipairs(Quests) do
                                if q.DisplayName == questName then
                                    questData = q
                                    break
                                end
                            end
                            if questData then
                                FarmQuest(questData, "multi")
                            end
                        end
                    end
                end
            end)
        else
            if multiFarmTask then
                task.cancel(multiFarmTask)
                multiFarmTask = nil
            end
            QuestEvent:FireServer({ Type = "RemoveQuest" })
            if multiFarmHeartbeat then multiFarmHeartbeat:Disconnect(); multiFarmHeartbeat = nil end
            if multiFarmZoneLock then multiFarmZoneLock:Disconnect(); multiFarmZoneLock = nil end
            if not isScriptInitialized then
                WindUI:Notify({
                    Title = "Auto-Farm (Specific & Multi)",
                    Content = "Disabled!",
                    Duration = 3,
                    Icon = "badge-minus",
                })
            end
        end
    end
})

local MultiDropdown = FarmTab:Dropdown({
    Title = "Select Quests to Farm",
    Values = questOptions,
    Value = {},
    Multi = true,
    AllowNone = true,
    Callback = function(option) 
        selectedQuests = option
    end
})

isScriptInitialized = false
